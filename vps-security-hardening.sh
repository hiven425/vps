#!/bin/bash

# VPS安全加固专用工具
# 版本：3.0.0
# 专注：系统安全加固、SSH配置、防火墙管理、入侵防护
# 支持系统：Ubuntu/Debian/CentOS

set -euo pipefail

#region //全局配置
version="3.0.0"
script_name="vps-security-hardening"

# 颜色定义
if [[ -t 1 ]] && command -v tput >/dev/null 2>&1 && tput colors >/dev/null 2>&1; then
    red='\033[31m'
    green='\033[32m'
    yellow='\033[33m'
    blue='\033[34m'
    pink='\033[35m'
    cyan='\033[36m'
    white='\033[0m'
    bold='\033[1m'
else
    red='' green='' yellow='' blue='' pink='' cyan='' white='' bold=''
fi

# 配置目录和文件
config_dir="/etc/vps-security"
backup_dir="$config_dir/backup"
log_file="/var/log/vps-security-hardening.log"
ssh_config_file="/etc/ssh/sshd_config.d/99-vps-security.conf"

# 系统信息
OS=""
OS_VERSION=""
PACKAGE_MANAGER=""
#endregion

#region //基础工具函数
log_operation() {
    local message="$1"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] $message" >> "$log_file"
}

error_exit() {
    local message="$1"
    echo -e "${red}✗ 错误: ${message}${white}" >&2
    log_operation "ERROR: $message"
    exit 1
}

success_msg() {
    local message="$1"
    echo -e "${green}✓ ${message}${white}"
    log_operation "SUCCESS: $message"
}

warn_msg() {
    local message="$1"
    echo -e "${yellow}⚠ ${message}${white}"
    log_operation "WARNING: $message"
}

info_msg() {
    local message="$1"
    echo -e "${blue}ℹ ${message}${white}"
    log_operation "INFO: $message"
}

check_root_permission() {
    if [[ $EUID -ne 0 ]]; then
        error_exit "此脚本需要root权限运行。请使用: sudo $0"
    fi
}

create_directories() {
    local dirs=("$config_dir" "$backup_dir" "$(dirname "$log_file")")
    for dir in "${dirs[@]}"; do
        if [[ ! -d "$dir" ]]; then
            mkdir -p "$dir"
            chmod 750 "$dir"
        fi
    done
}

detect_system() {
    if [[ -f /etc/os-release ]]; then
        . /etc/os-release
        OS=$ID
        OS_VERSION=$VERSION_ID
    else
        error_exit "无法检测系统版本"
    fi
    
    case $OS in
        ubuntu|debian)
            PACKAGE_MANAGER="apt"
            ;;
        centos|rhel|fedora)
            PACKAGE_MANAGER="yum"
            if command -v dnf >/dev/null 2>&1; then
                PACKAGE_MANAGER="dnf"
            fi
            ;;
        *)
            error_exit "不支持的操作系统: $OS"
            ;;
    esac
    
    info_msg "检测到系统: $OS $OS_VERSION"
}

backup_file() {
    local file="$1"
    local backup_suffix="$(date +%Y%m%d_%H%M%S)"
    
    if [[ -f "$file" ]]; then
        local backup_path="$backup_dir/$(basename "$file").backup.$backup_suffix"
        cp "$file" "$backup_path"
        success_msg "文件已备份: $file -> $backup_path"
    fi
}
#endregion

#region //SSH安全配置模块
get_ssh_config_value() {
    local key="$1"
    local default_value="${2:-}"
    
    if command -v sshd >/dev/null 2>&1; then
        sshd -T 2>/dev/null | grep -i "^$key " | awk '{print $2}' | head -1 || echo "$default_value"
    else
        echo "$default_value"
    fi
}

validate_ssh_port() {
    local port="$1"
    
    if ! [[ "$port" =~ ^[0-9]+$ ]]; then
        return 1
    fi
    
    if [[ $port -lt 1024 || $port -gt 65535 ]]; then
        return 1
    fi
    
    if ss -tuln 2>/dev/null | grep -q ":$port "; then
        warn_msg "端口 $port 可能已被占用"
        return 1
    fi
    
    return 0
}

generate_ssh_keys() {
    local key_type="${1:-ed25519}"
    local key_dir="$HOME/.ssh"
    
    info_msg "生成SSH密钥对..."
    
    mkdir -p "$key_dir"
    chmod 700 "$key_dir"
    
    local private_key="$key_dir/id_$key_type"
    local public_key="$private_key.pub"
    
    if [[ -f "$private_key" ]]; then
        warn_msg "SSH密钥已存在: $private_key"
        return 0
    fi
    
    case "$key_type" in
        "ed25519")
            ssh-keygen -t ed25519 -f "$private_key" -N "" -C "Generated by VPS Security Tool $(date +%Y%m%d)"
            ;;
        "rsa")
            ssh-keygen -t rsa -b 4096 -f "$private_key" -N "" -C "Generated by VPS Security Tool $(date +%Y%m%d)"
            ;;
        *)
            error_exit "不支持的密钥类型: $key_type"
            ;;
    esac
    
    chmod 600 "$private_key"
    chmod 644 "$public_key"
    
    success_msg "SSH密钥生成完成"
    echo
    echo -e "${cyan}公钥内容 (请添加到目标服务器的 ~/.ssh/authorized_keys):${white}"
    echo -e "${green}$(cat "$public_key")${white}"
    echo
}

handle_cloud_config_conflicts() {
    info_msg "检查云服务商SSH配置冲突..."
    
    local ssh_config_dir="/etc/ssh/sshd_config.d"
    local cloud_configs=(
        "50-cloud-init.conf"
        "60-cloudimg-settings.conf"
        "99-cloudimg-settings.conf"
        "azure.conf"
        "google.conf"
    )
    
    local conflicts_found=false
    
    for config in "${cloud_configs[@]}"; do
        local config_path="$ssh_config_dir/$config"
        if [[ -f "$config_path" ]]; then
            conflicts_found=true
            backup_file "$config_path"
            
            local disabled_name="${config}.disabled-$(date +%s)"
            mv "$config_path" "$ssh_config_dir/$disabled_name"
            success_msg "已禁用云配置: $config -> $disabled_name"
        fi
    done
    
    if [[ "$conflicts_found" == "false" ]]; then
        success_msg "未发现云服务商配置冲突"
    fi
}

generate_secure_ssh_config() {
    local ssh_port="$1"
    local permit_root="${2:-prohibit-password}"
    local password_auth="${3:-no}"
    
    info_msg "生成安全SSH配置..."
    
    # 备份原配置
    backup_file "/etc/ssh/sshd_config"
    
    # 创建配置目录
    mkdir -p "$(dirname "$ssh_config_file")"
    
    cat > "$ssh_config_file" << EOF
# VPS安全加固工具 - SSH安全配置
# 生成时间: $(date '+%Y-%m-%d %H:%M:%S')
# 版本: $version
# 
# 此配置文件优先级高于主配置文件和云服务商配置

# === 基础连接设置 ===
Port $ssh_port
Protocol 2
AddressFamily any

# === 认证设置 ===
# Root登录控制
PermitRootLogin $permit_root

# 认证方式
PasswordAuthentication $password_auth
PubkeyAuthentication yes
AuthorizedKeysFile .ssh/authorized_keys

# 安全认证设置
PermitEmptyPasswords no
ChallengeResponseAuthentication no
KbdInteractiveAuthentication no
HostbasedAuthentication no
IgnoreRhosts yes
UsePAM yes

# === 连接安全限制 ===
# 认证尝试限制
MaxAuthTries 3
MaxSessions 4
MaxStartups 10:30:60

# 登录时间限制
LoginGraceTime 60

# 连接保活设置
ClientAliveInterval 300
ClientAliveCountMax 2
TCPKeepAlive yes

# === 功能控制 ===
# X11转发 (通常应该禁用)
X11Forwarding no
X11DisplayOffset 10
X11UseLocalhost yes

# 端口转发控制
AllowTcpForwarding yes
AllowStreamLocalForwarding no
GatewayPorts no
PermitTunnel no

# === 性能优化 ===
# DNS解析 (禁用以提高连接速度)
UseDNS no

# GSSAPI认证 (通常不需要)
GSSAPIAuthentication no
GSSAPICleanupCredentials yes

# 压缩设置
Compression delayed

# === 现代加密算法设置 ===
# 密钥交换算法 (仅允许安全算法)
KexAlgorithms curve25519-sha256@libssh.org,ecdh-sha2-nistp521,ecdh-sha2-nistp384,ecdh-sha2-nistp256,diffie-hellman-group16-sha512

# 加密算法 (仅允许现代安全算法)
Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr

# MAC算法 (消息认证码)
MACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha2-256,hmac-sha2-512

# 主机密钥算法
HostKeyAlgorithms ssh-ed25519,ecdsa-sha2-nistp521,ecdsa-sha2-nistp384,ecdsa-sha2-nistp256,rsa-sha2-512,rsa-sha2-256

# === 日志设置 ===
SyslogFacility AUTH
LogLevel INFO

# === 其他安全设置 ===
# 严格模式 (检查文件权限)
StrictModes yes

# 登录信息
PrintMotd no
PrintLastLog yes

# 禁用过时功能
KerberosAuthentication no
EOF
    
    chmod 644 "$ssh_config_file"
    success_msg "SSH配置文件已生成: $ssh_config_file"
    
    # 验证配置语法
    if sshd -t 2>/dev/null; then
        success_msg "SSH配置语法验证通过"
        return 0
    else
        error_exit "SSH配置语法验证失败，请检查配置"
    fi
}

ssh_security_audit() {
    info_msg "执行SSH安全审计..."
    
    local issues=0
    local warnings=0
    
    echo
    echo -e "${cyan}=== SSH安全审计报告 ===${white}"
    
    # 检查端口
    local current_port=$(get_ssh_config_value "port" "22")
    if [[ "$current_port" == "22" ]]; then
        echo -e "${red}✗ 使用默认SSH端口22，易受扫描攻击${white}"
        ((issues++))
    else
        echo -e "${green}✓ SSH端口已修改: $current_port${white}"
    fi
    
    # 检查Root登录
    local root_login=$(get_ssh_config_value "permitrootlogin" "yes")
    case "$root_login" in
        "yes")
            echo -e "${red}✗ 允许Root密码登录，安全风险极高${white}"
            ((issues++))
            ;;
        "prohibit-password"|"without-password")
            echo -e "${green}✓ Root仅允许密钥登录${white}"
            ;;
        "no")
            echo -e "${green}✓ 完全禁止Root登录${white}"
            ;;
    esac
    
    # 检查密码认证
    local password_auth=$(get_ssh_config_value "passwordauthentication" "yes")
    if [[ "$password_auth" == "yes" ]]; then
        echo -e "${yellow}⚠ 启用了密码认证，存在暴力破解风险${white}"
        ((warnings++))
    else
        echo -e "${green}✓ 密码认证已禁用${white}"
    fi
    
    # 检查密钥认证
    local pubkey_auth=$(get_ssh_config_value "pubkeyauthentication" "yes")
    if [[ "$pubkey_auth" == "yes" ]]; then
        echo -e "${green}✓ 公钥认证已启用${white}"
    else
        echo -e "${yellow}⚠ 公钥认证未启用${white}"
        ((warnings++))
    fi
    
    # 检查空密码
    local empty_passwords=$(get_ssh_config_value "permitemptypasswords" "no")
    if [[ "$empty_passwords" == "yes" ]]; then
        echo -e "${red}✗ 允许空密码登录，安全风险极高${white}"
        ((issues++))
    else
        echo -e "${green}✓ 禁止空密码登录${white}"
    fi
    
    echo
    echo -e "${cyan}审计总结:${white}"
    if [[ $issues -eq 0 && $warnings -eq 0 ]]; then
        echo -e "${green}✓ SSH配置安全审计通过${white}"
    else
        echo -e "${yellow}发现 $issues 个严重问题，$warnings 个警告${white}"
    fi
    
    return $((issues + warnings))
}

restart_ssh_service() {
    local current_port=$(get_ssh_config_value "port" "22")
    info_msg "重启前SSH端口: $current_port"
    
    # 确保配置优先级
    handle_cloud_config_conflicts
    
    # 重启SSH服务
    if systemctl restart sshd 2>/dev/null || systemctl restart ssh 2>/dev/null; then
        sleep 2
        local new_port=$(get_ssh_config_value "port" "22")
        
        if [[ "$current_port" == "$new_port" ]]; then
            success_msg "SSH服务重启成功，端口保持为: $new_port"
        else
            warn_msg "SSH端口发生变化: $current_port -> $new_port"
        fi
        
        # 检查服务状态
        if systemctl is-active sshd >/dev/null 2>&1 || systemctl is-active ssh >/dev/null 2>&1; then
            success_msg "SSH服务运行正常"
        else
            error_exit "SSH服务重启后状态异常"
        fi
    else
        error_exit "SSH服务重启失败"
    fi
}

configure_ssh_security() {
    clear
    echo -e "${cyan}=== SSH安全配置 ===${white}"
    echo
    
    # 显示当前配置
    local current_port=$(get_ssh_config_value "port" "22")
    local current_root=$(get_ssh_config_value "permitrootlogin" "yes")
    local current_password=$(get_ssh_config_value "passwordauthentication" "yes")
    
    echo "当前SSH配置:"
    echo "  端口: $current_port"
    echo "  Root登录: $current_root"
    echo "  密码认证: $current_password"
    echo
    
    # 获取新端口
    local new_port
    while true; do
        read -p "请输入新的SSH端口 (1024-65535) [默认: 55520]: " new_port
        new_port=${new_port:-55520}
        
        if validate_ssh_port "$new_port"; then
            break
        else
            warn_msg "端口 $new_port 无效或已被占用，请重新输入"
        fi
    done
    
    # Root登录设置
    echo
    echo "Root登录选项:"
    echo "1. no - 完全禁止Root登录 (最安全)"
    echo "2. prohibit-password - 仅允许密钥登录 (推荐)"
    echo "3. yes - 允许密码登录 (不推荐)"
    echo
    
    local root_choice
    read -p "请选择Root登录方式 [1-3, 默认: 2]: " root_choice
    
    local permit_root
    case "${root_choice:-2}" in
        1) permit_root="no" ;;
        2) permit_root="prohibit-password" ;;
        3) 
            warn_msg "允许Root密码登录存在严重安全风险！"
            read -p "确认要允许Root密码登录吗？(y/N): " confirm
            if [[ "$confirm" =~ ^[Yy]$ ]]; then
                permit_root="yes"
            else
                permit_root="prohibit-password"
            fi
            ;;
        *) permit_root="prohibit-password" ;;
    esac
    
    # 密码认证设置
    echo
    echo "密码认证选项:"
    echo "1. no - 禁用密码认证，仅使用密钥 (推荐)"
    echo "2. yes - 允许密码认证"
    echo
    
    local password_choice
    read -p "请选择密码认证方式 [1-2, 默认: 1]: " password_choice
    
    local password_auth
    case "${password_choice:-1}" in
        1) password_auth="no" ;;
        2)
            warn_msg "允许密码认证可能存在暴力破解风险！"
            read -p "确认要允许密码认证吗？(y/N): " confirm
            if [[ "$confirm" =~ ^[Yy]$ ]]; then
                password_auth="yes"
            else
                password_auth="no"
            fi
            ;;
        *) password_auth="no" ;;
    esac
    
    # 生成SSH密钥 (如果禁用密码认证)
    if [[ "$password_auth" == "no" ]]; then
        echo
        read -p "是否生成新的SSH密钥？(Y/n): " key_confirm
        if [[ ! "$key_confirm" =~ ^[Nn]$ ]]; then
            echo
            echo "密钥类型选项:"
            echo "1. ed25519 - 现代加密算法 (推荐)"
            echo "2. rsa - 传统RSA算法"
            echo
            
            local key_choice
            read -p "请选择密钥类型 [1-2, 默认: 1]: " key_choice
            
            local key_type
            case "${key_choice:-1}" in
                1) key_type="ed25519" ;;
                2) key_type="rsa" ;;
                *) key_type="ed25519" ;;
            esac
            
            generate_ssh_keys "$key_type"
        fi
    fi
    
    # 应用配置
    echo
    info_msg "应用SSH安全配置..."
    generate_secure_ssh_config "$new_port" "$permit_root" "$password_auth"
    
    # 配置摘要
    echo
    echo -e "${cyan}配置摘要:${white}"
    echo "  SSH端口: $new_port"
    echo "  Root登录: $permit_root"
    echo "  密码认证: $password_auth"
    echo "  配置文件: $ssh_config_file"
    echo
    
    # 重启服务确认
    read -p "是否现在重启SSH服务使配置生效？(y/N): " restart_confirm
    if [[ "$restart_confirm" =~ ^[Yy]$ ]]; then
        restart_ssh_service
        
        echo
        success_msg "SSH安全配置完成！"
        echo
        echo -e "${yellow}重要提醒:${white}"
        echo "1. SSH端口已更改为: $new_port"
        echo "2. 请在新终端测试连接: ssh -p $new_port user@server"
        echo "3. 确认连接正常后再断开当前会话"
        if [[ "$password_auth" == "no" ]]; then
            echo "4. 密码认证已禁用，请确保已配置SSH密钥"
        fi
    else
        warn_msg "SSH服务未重启，请手动执行重启命令"
        echo "systemctl restart sshd  # 或 systemctl restart ssh"
    fi
}
#endregion

#region //防火墙配置模块
install_ufw() {
    info_msg "安装UFW防火墙..."
    
    case $PACKAGE_MANAGER in
        apt)
            apt update -qq && apt install -y ufw
            ;;
        yum|dnf)
            $PACKAGE_MANAGER install -y ufw
            ;;
    esac
    
    success_msg "UFW防火墙安装完成"
}

configure_ufw_firewall() {
    info_msg "配置UFW防火墙..."
    
    # 检查并安装UFW
    if ! command -v ufw >/dev/null 2>&1; then
        install_ufw
    fi
    
    # 备份现有规则
    if [[ -f /etc/ufw/user.rules ]]; then
        backup_file "/etc/ufw/user.rules"
    fi
    
    # 重置防火墙规则
    ufw --force reset
    
    # 设置默认策略
    ufw default deny incoming
    ufw default allow outgoing
    
    # 获取SSH端口
    local ssh_port=$(get_ssh_config_value "port" "22")
    
    # 允许基础服务
    ufw allow "$ssh_port/tcp" comment "SSH"
    ufw allow 80/tcp comment "HTTP"
    ufw allow 443/tcp comment "HTTPS"
    
    # 询问是否允许其他端口
    echo
    echo "是否需要开放其他端口？"
    echo "常用端口："
    echo "  21/tcp - FTP"
    echo "  25/tcp - SMTP"
    echo "  53/tcp,53/udp - DNS"
    echo "  110/tcp - POP3"
    echo "  143/tcp - IMAP"
    echo "  993/tcp - IMAPS"
    echo "  995/tcp - POP3S"
    echo
    
    read -p "是否开放FTP端口21？(y/N): " ftp_confirm
    if [[ "$ftp_confirm" =~ ^[Yy]$ ]]; then
        ufw allow 21/tcp comment "FTP"
    fi
    
    read -p "是否开放邮件服务端口？(y/N): " mail_confirm
    if [[ "$mail_confirm" =~ ^[Yy]$ ]]; then
        ufw allow 25/tcp comment "SMTP"
        ufw allow 110/tcp comment "POP3"
        ufw allow 143/tcp comment "IMAP"
        ufw allow 993/tcp comment "IMAPS"
        ufw allow 995/tcp comment "POP3S"
    fi
    
    read -p "请输入其他需要开放的端口 (格式: 8080/tcp,9000/udp 或直接回车跳过): " custom_ports
    if [[ -n "$custom_ports" ]]; then
        IFS=',' read -ra ports <<< "$custom_ports"
        for port in "${ports[@]}"; do
            if [[ "$port" =~ ^[0-9]+/(tcp|udp)$ ]]; then
                ufw allow "$port" comment "Custom"
                success_msg "已开放端口: $port"
            else
                warn_msg "无效端口格式: $port"
            fi
        done
    fi
    
    # 启用防火墙
    ufw --force enable
    
    success_msg "UFW防火墙配置完成"
    
    # 显示当前规则
    echo
    echo -e "${cyan}当前防火墙规则:${white}"
    ufw status numbered
}

configure_fail2ban() {
    info_msg "配置fail2ban入侵防护..."
    
    # 检查并安装fail2ban
    if ! command -v fail2ban-server >/dev/null 2>&1; then
        case $PACKAGE_MANAGER in
            apt)
                apt update -qq && apt install -y fail2ban
                ;;
            yum|dnf)
                $PACKAGE_MANAGER install -y fail2ban
                ;;
        esac
    fi
    
    # 备份原配置
    backup_file "/etc/fail2ban/jail.conf"
    
    # 创建本地配置文件
    cat > /etc/fail2ban/jail.local << EOF
# VPS安全加固工具 - fail2ban配置
# 生成时间: $(date '+%Y-%m-%d %H:%M:%S')

[DEFAULT]
# 默认忽略IP (本地地址)
ignoreip = 127.0.0.1/8 ::1

# 禁止时间 (秒)
bantime = 3600

# 检查时间窗口 (秒)
findtime = 600

# 最大重试次数
maxretry = 3

# 后端类型
backend = auto

# 邮件设置 (可选)
# destemail = admin@example.com
# sender = fail2ban@example.com
# mta = sendmail

[sshd]
enabled = true
port = $(get_ssh_config_value "port" "22")
filter = sshd
logpath = /var/log/auth.log
maxretry = 3
bantime = 3600

[nginx-http-auth]
enabled = false
filter = nginx-http-auth
logpath = /var/log/nginx/error.log
maxretry = 3

[nginx-noscript]
enabled = false
filter = nginx-noscript
logpath = /var/log/nginx/access.log
maxretry = 6

[nginx-badbots]
enabled = false
filter = nginx-badbots
logpath = /var/log/nginx/access.log
maxretry = 2

[nginx-noproxy]
enabled = false
filter = nginx-noproxy
logpath = /var/log/nginx/access.log
maxretry = 2
EOF
    
    # 启用并启动服务
    systemctl enable fail2ban
    systemctl restart fail2ban
    
    success_msg "fail2ban入侵防护配置完成"
    
    # 显示状态
    echo
    echo -e "${cyan}fail2ban状态:${white}"
    fail2ban-client status
}

configure_firewall() {
    clear
    echo -e "${cyan}=== 防火墙配置 ===${white}"
    echo
    
    echo "防火墙配置选项:"
    echo "1. 配置UFW防火墙 (推荐)"
    echo "2. 配置fail2ban入侵防护"
    echo "3. 完整防火墙配置 (UFW + fail2ban)"
    echo "4. 仅显示当前状态"
    echo
    
    local choice
    read -p "请选择 [1-4]: " choice
    
    case $choice in
        1)
            configure_ufw_firewall
            ;;
        2)
            configure_fail2ban
            ;;
        3)
            configure_ufw_firewall
            echo
            configure_fail2ban
            ;;
        4)
            show_firewall_status
            ;;
        *)
            warn_msg "无效选择"
            return 1
            ;;
    esac
}

show_firewall_status() {
    echo -e "${cyan}=== 防火墙状态 ===${white}"
    echo
    
    # UFW状态
    if command -v ufw >/dev/null 2>&1; then
        echo -e "${cyan}UFW状态:${white}"
        ufw status verbose
        echo
    fi
    
    # fail2ban状态
    if command -v fail2ban-client >/dev/null 2>&1; then
        echo -e "${cyan}fail2ban状态:${white}"
        systemctl is-active fail2ban
        fail2ban-client status 2>/dev/null || echo "fail2ban未运行"
        echo
    fi
    
    # iptables规则摘要
    if command -v iptables >/dev/null 2>&1; then
        echo -e "${cyan}iptables规则摘要:${white}"
        iptables -L INPUT -n --line-numbers | head -10
    fi
}
#endregion

#region //系统加固模块
harden_kernel_parameters() {
    info_msg "加固内核参数..."
    
    backup_file "/etc/sysctl.conf"
    
    cat > /etc/sysctl.d/99-security-hardening.conf << EOF
# VPS安全加固 - 内核参数优化
# 生成时间: $(date '+%Y-%m-%d %H:%M:%S')

# === 网络安全设置 ===
# 禁用IPv4转发 (除非需要路由功能)
net.ipv4.ip_forward = 0

# 禁用IPv6转发
net.ipv6.conf.all.forwarding = 0

# 禁用ICMP重定向
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv6.conf.all.accept_redirects = 0
net.ipv6.conf.default.accept_redirects = 0

# 禁用发送ICMP重定向
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0

# 禁用源路由
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0
net.ipv6.conf.all.accept_source_route = 0
net.ipv6.conf.default.accept_source_route = 0

# 启用源地址验证
net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.default.rp_filter = 1

# 忽略ICMP ping请求 (可选)
# net.ipv4.icmp_echo_ignore_all = 1

# 忽略广播ping请求
net.ipv4.icmp_echo_ignore_broadcasts = 1

# 忽略错误ICMP响应
net.ipv4.icmp_ignore_bogus_error_responses = 1

# TCP SYN cookies防护
net.ipv4.tcp_syncookies = 1

# 记录可疑数据包
net.ipv4.conf.all.log_martians = 1
net.ipv4.conf.default.log_martians = 1

# === 内存保护 ===
# 禁用magic SysRq键
kernel.sysrq = 0

# 限制dmesg访问
kernel.dmesg_restrict = 1

# 限制内核指针泄露
kernel.kptr_restrict = 2

# === 文件系统安全 ===
# 限制核心转储
fs.suid_dumpable = 0

# 进程地址空间随机化
kernel.randomize_va_space = 2

# === 网络性能优化 ===
# TCP窗口缩放
net.ipv4.tcp_window_scaling = 1

# TCP时间戳
net.ipv4.tcp_timestamps = 1

# TCP SACK
net.ipv4.tcp_sack = 1

# TCP快速打开 (谨慎启用)
# net.ipv4.tcp_fastopen = 3

# 网络缓冲区大小
net.core.rmem_max = 134217728
net.core.wmem_max = 134217728
net.ipv4.tcp_rmem = 4096 87380 134217728
net.ipv4.tcp_wmem = 4096 65536 134217728

# 连接队列大小
net.core.somaxconn = 32768
net.core.netdev_max_backlog = 32768

# TCP连接参数
net.ipv4.tcp_max_syn_backlog = 32768
net.ipv4.tcp_fin_timeout = 15
net.ipv4.tcp_keepalive_time = 600
EOF
    
    # 应用设置
    sysctl -p /etc/sysctl.d/99-security-hardening.conf >/dev/null 2>&1
    
    success_msg "内核参数加固完成"
}

configure_user_limits() {
    info_msg "配置用户资源限制..."
    
    backup_file "/etc/security/limits.conf"
    
    cat > /etc/security/limits.d/99-security-hardening.conf << EOF
# VPS安全加固 - 用户资源限制
# 生成时间: $(date '+%Y-%m-%d %H:%M:%S')

# 文件描述符限制
* soft nofile 65535
* hard nofile 65535
root soft nofile 65535
root hard nofile 65535

# 进程数限制
* soft nproc 32768
* hard nproc 32768

# 内存锁定限制
* soft memlock unlimited
* hard memlock unlimited

# 栈大小限制
* soft stack 8192
* hard stack 8192
EOF
    
    success_msg "用户资源限制配置完成"
}

disable_unnecessary_services() {
    info_msg "禁用不必要的系统服务..."
    
    # 常见的可以禁用的服务列表
    local services_to_disable=(
        "avahi-daemon"      # 网络发现服务
        "cups"              # 打印服务
        "bluetooth"         # 蓝牙服务
        "ModemManager"      # 调制解调器管理
        "whoopsie"          # Ubuntu错误报告
        "apport"            # Ubuntu崩溃报告
    )
    
    for service in "${services_to_disable[@]}"; do
        if systemctl is-enabled "$service" >/dev/null 2>&1; then
            systemctl disable "$service" >/dev/null 2>&1
            systemctl stop "$service" >/dev/null 2>&1
            success_msg "已禁用服务: $service"
        fi
    done
    
    success_msg "不必要服务禁用完成"
}

configure_automatic_updates() {
    info_msg "配置自动安全更新..."
    
    case $PACKAGE_MANAGER in
        apt)
            # 安装unattended-upgrades
            apt update -qq && apt install -y unattended-upgrades
            
            # 配置自动更新
            cat > /etc/apt/apt.conf.d/50unattended-upgrades << EOF
// VPS安全加固 - 自动更新配置
Unattended-Upgrade::Allowed-Origins {
    "\${distro_id}:\${distro_codename}-security";
    "\${distro_id}ESMApps:\${distro_codename}-apps-security";
    "\${distro_id}ESM:\${distro_codename}-infra-security";
};

Unattended-Upgrade::AutoFixInterruptedDpkg "true";
Unattended-Upgrade::MinimalSteps "true";
Unattended-Upgrade::Remove-Unused-Dependencies "true";
Unattended-Upgrade::Automatic-Reboot "false";
Unattended-Upgrade::Automatic-Reboot-Time "02:00";
EOF
            
            cat > /etc/apt/apt.conf.d/20auto-upgrades << EOF
APT::Periodic::Update-Package-Lists "1";
APT::Periodic::Unattended-Upgrade "1";
APT::Periodic::Download-Upgradeable-Packages "1";
APT::Periodic::AutocleanInterval "7";
EOF
            
            # 启用服务
            systemctl enable unattended-upgrades
            systemctl start unattended-upgrades
            ;;
            
        yum|dnf)
            # 安装yum-cron或dnf-automatic
            if [[ "$PACKAGE_MANAGER" == "dnf" ]]; then
                dnf install -y dnf-automatic
                systemctl enable dnf-automatic.timer
                systemctl start dnf-automatic.timer
            else
                yum install -y yum-cron
                systemctl enable yum-cron
                systemctl start yum-cron
            fi
            ;;
    esac
    
    success_msg "自动安全更新配置完成"
}

system_hardening() {
    clear
    echo -e "${cyan}=== 系统安全加固 ===${white}"
    echo
    
    echo "系统加固选项:"
    echo "1. 内核参数加固"
    echo "2. 用户资源限制"
    echo "3. 禁用不必要服务"
    echo "4. 配置自动更新"
    echo "5. 完整系统加固"
    echo
    
    local choice
    read -p "请选择 [1-5]: " choice
    
    case $choice in
        1)
            harden_kernel_parameters
            ;;
        2)
            configure_user_limits
            ;;
        3)
            disable_unnecessary_services
            ;;
        4)
            configure_automatic_updates
            ;;
        5)
            info_msg "执行完整系统加固..."
            harden_kernel_parameters
            configure_user_limits
            disable_unnecessary_services
            configure_automatic_updates
            success_msg "完整系统加固完成"
            ;;
        *)
            warn_msg "无效选择"
            return 1
            ;;
    esac
}
#endregion

#region //安全审计模块
security_audit() {
    clear
    echo -e "${cyan}=== 系统安全审计 ===${white}"
    echo
    
    local total_issues=0
    
    # SSH安全审计
    echo -e "${pink}SSH安全检查:${white}"
    ssh_security_audit
    total_issues=$((total_issues + $?))
    echo
    
    # 防火墙检查
    echo -e "${pink}防火墙检查:${white}"
    if command -v ufw >/dev/null 2>&1; then
        local ufw_status=$(ufw status | head -1 | grep -o "Status: [a-z]*" | cut -d: -f2 | xargs)
        if [[ "$ufw_status" == "active" ]]; then
            echo -e "${green}✓ UFW防火墙已启用${white}"
        else
            echo -e "${red}✗ UFW防火墙未启用${white}"
            ((total_issues++))
        fi
    else
        echo -e "${yellow}⚠ UFW防火墙未安装${white}"
    fi
    
    if command -v fail2ban-client >/dev/null 2>&1; then
        if systemctl is-active fail2ban >/dev/null 2>&1; then
            echo -e "${green}✓ fail2ban入侵防护已启用${white}"
        else
            echo -e "${red}✗ fail2ban入侵防护未运行${white}"
            ((total_issues++))
        fi
    else
        echo -e "${yellow}⚠ fail2ban入侵防护未安装${white}"
    fi
    echo
    
    # 系统更新检查
    echo -e "${pink}系统更新检查:${white}"
    case $PACKAGE_MANAGER in
        apt)
            local updates=$(apt list --upgradable 2>/dev/null | wc -l)
            if [[ $updates -gt 1 ]]; then
                echo -e "${yellow}⚠ 有 $((updates-1)) 个软件包需要更新${white}"
            else
                echo -e "${green}✓ 系统软件包已是最新${white}"
            fi
            
            if systemctl is-active unattended-upgrades >/dev/null 2>&1; then
                echo -e "${green}✓ 自动更新服务已启用${white}"
            else
                echo -e "${yellow}⚠ 自动更新服务未启用${white}"
            fi
            ;;
        yum|dnf)
            if systemctl is-active yum-cron >/dev/null 2>&1 || systemctl is-active dnf-automatic.timer >/dev/null 2>&1; then
                echo -e "${green}✓ 自动更新服务已启用${white}"
            else
                echo -e "${yellow}⚠ 自动更新服务未启用${white}"
            fi
            ;;
    esac
    echo
    
    # 文件权限检查
    echo -e "${pink}关键文件权限检查:${white}"
    local sensitive_files=(
        "/etc/passwd:644"
        "/etc/shadow:640"
        "/etc/ssh/sshd_config:644"
        "/root:700"
    )
    
    for file_perm in "${sensitive_files[@]}"; do
        local file="${file_perm%:*}"
        local expected_perm="${file_perm#*:}"
        
        if [[ -e "$file" ]]; then
            local actual_perm=$(stat -c '%a' "$file")
            if [[ "$actual_perm" == "$expected_perm" ]]; then
                echo -e "${green}✓ $file 权限正确 ($actual_perm)${white}"
            else
                echo -e "${red}✗ $file 权限异常: $actual_perm (应为 $expected_perm)${white}"
                ((total_issues++))
            fi
        fi
    done
    echo
    
    # 运行进程检查
    echo -e "${pink}可疑进程检查:${white}"
    local suspicious_processes=(
        "bitcoin"
        "monero"
        "xmrig"
        "cryptonight"
        "stratum"
    )
    
    local found_suspicious=false
    for process in "${suspicious_processes[@]}"; do
        if pgrep -f "$process" >/dev/null 2>&1; then
            echo -e "${red}✗ 发现可疑进程: $process${white}"
            ((total_issues++))
            found_suspicious=true
        fi
    done
    
    if [[ "$found_suspicious" == "false" ]]; then
        echo -e "${green}✓ 未发现可疑进程${white}"
    fi
    echo
    
    # 审计总结
    echo -e "${cyan}=== 安全审计总结 ===${white}"
    if [[ $total_issues -eq 0 ]]; then
        echo -e "${green}✓ 安全审计通过，未发现严重问题${white}"
    else
        echo -e "${yellow}发现 $total_issues 个安全问题，建议进行修复${white}"
    fi
    echo
    
    return $total_issues
}
#endregion

#region //主菜单系统
show_system_status() {
    clear
    echo -e "${pink}=== 系统状态总览 ===${white}"
    echo
    
    # 系统信息
    echo -e "${cyan}系统信息:${white}"
    echo "  操作系统: $(lsb_release -d 2>/dev/null | cut -d: -f2 | xargs || cat /etc/os-release | grep PRETTY_NAME | cut -d= -f2 | tr -d '\"')"
    echo "  内核版本: $(uname -r)"
    echo "  运行时间: $(uptime -p 2>/dev/null || uptime | awk -F'up ' '{print $2}' | awk -F', load' '{print $1}')"
    echo "  系统负载: $(uptime | awk -F'load average:' '{print $2}')"
    echo
    
    # SSH状态
    echo -e "${cyan}SSH状态:${white}"
    if systemctl is-active sshd >/dev/null 2>&1 || systemctl is-active ssh >/dev/null 2>&1; then
        echo "  服务状态: ${green}运行中${white}"
        echo "  监听端口: $(get_ssh_config_value 'port' '22')"
        echo "  Root登录: $(get_ssh_config_value 'permitrootlogin' '未知')"
        echo "  密码认证: $(get_ssh_config_value 'passwordauthentication' '未知')"
    else
        echo "  服务状态: ${red}未运行${white}"
    fi
    echo
    
    # 安全状态
    echo -e "${cyan}安全状态:${white}"
    
    # 防火墙状态
    if command -v ufw >/dev/null 2>&1; then
        local ufw_status=$(ufw status | head -1 | cut -d: -f2 | xargs)
        echo "  UFW防火墙: ${green}$ufw_status${white}"
    else
        echo "  UFW防火墙: ${yellow}未安装${white}"
    fi
    
    # fail2ban状态
    if command -v fail2ban-client >/dev/null 2>&1; then
        if systemctl is-active fail2ban >/dev/null 2>&1; then
            echo "  fail2ban: ${green}运行中${white}"
        else
            echo "  fail2ban: ${red}未运行${white}"
        fi
    else
        echo "  fail2ban: ${yellow}未安装${white}"
    fi
    
    # 自动更新状态
    if systemctl is-enabled unattended-upgrades >/dev/null 2>&1; then
        echo "  自动更新: ${green}已启用${white}"
    elif systemctl is-enabled yum-cron >/dev/null 2>&1 || systemctl is-enabled dnf-automatic.timer >/dev/null 2>&1; then
        echo "  自动更新: ${green}已启用${white}"
    else
        echo "  自动更新: ${yellow}未启用${white}"
    fi
    echo
    
    # 资源使用情况
    echo -e "${cyan}资源使用情况:${white}"
    echo "  CPU使用率: $(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d% -f1)%"
    echo "  内存使用: $(free | grep Mem | awk '{printf "%.1f%%", $3/$2 * 100.0}')"
    echo "  磁盘使用: $(df / | tail -1 | awk '{print $5}')"
    echo "  网络连接: $(ss -tun | wc -l) 个活动连接"
    echo
}

show_help() {
    clear
    echo -e "${pink}=== VPS安全加固工具 v$version ===${white}"
    echo
    echo "专注于VPS服务器安全加固的专业工具"
    echo
    echo "用法: $0 [选项]"
    echo
    echo "快速操作选项:"
    echo "  --help, -h        显示此帮助信息"
    echo "  --version, -v     显示版本信息"
    echo "  --ssh             快速SSH安全配置"
    echo "  --firewall        快速防火墙配置"
    echo "  --harden          系统安全加固"
    echo "  --audit           安全审计检查"
    echo "  --status          显示系统状态"
    echo "  --full            完整安全加固"
    echo
    echo "主要功能:"
    echo "  • SSH安全配置与密钥管理"
    echo "  • UFW防火墙配置"
    echo "  • fail2ban入侵防护"
    echo "  • 系统内核参数加固"
    echo "  • 自动安全更新配置"
    echo "  • 全面安全审计检查"
    echo
    echo "支持系统: Ubuntu, Debian, CentOS, RHEL, Fedora"
    echo
}

main_menu() {
    while true; do
        clear
        echo -e "${pink}${bold}╔═══════════════════════════════════════════╗${white}"
        echo -e "${pink}${bold}║        VPS安全加固工具 v$version         ║${white}"
        echo -e "${pink}${bold}╚═══════════════════════════════════════════╝${white}"
        echo
        echo -e "${cyan}🛡️  SSH安全:${white}"
        echo "  1. SSH安全配置"
        echo "  2. SSH安全审计"
        echo "  3. SSH密钥管理"
        echo
        echo -e "${cyan}🔥 防火墙防护:${white}"
        echo "  4. 防火墙配置"
        echo "  5. 入侵防护 (fail2ban)"
        echo "  6. 防火墙状态"
        echo
        echo -e "${cyan}⚡ 系统加固:${white}"
        echo "  7. 内核参数加固"
        echo "  8. 系统服务管理"
        echo "  9. 自动更新配置"
        echo
        echo -e "${cyan}📊 安全管理:${white}"
        echo "  10. 系统状态"
        echo "  11. 安全审计"
        echo "  12. 完整加固"
        echo
        echo -e "${cyan}ℹ️  其他:${white}"
        echo "  13. 帮助信息"
        echo "  0. 退出"
        echo
        
        local choice
        read -p "请选择 [0-13]: " choice
        
        case $choice in
            1) configure_ssh_security ;;
            2) ssh_security_audit; read -p "按任意键继续..." -n 1 -s ;;
            3) 
                echo
                echo "SSH密钥管理:"
                echo "1. 生成ED25519密钥"
                echo "2. 生成RSA密钥"
                read -p "请选择 [1-2]: " key_choice
                case $key_choice in
                    1) generate_ssh_keys "ed25519" ;;
                    2) generate_ssh_keys "rsa" ;;
                esac
                read -p "按任意键继续..." -n 1 -s
                ;;
            4) configure_firewall ;;
            5) configure_fail2ban; read -p "按任意键继续..." -n 1 -s ;;
            6) show_firewall_status; read -p "按任意键继续..." -n 1 -s ;;
            7) harden_kernel_parameters; read -p "按任意键继续..." -n 1 -s ;;
            8) disable_unnecessary_services; read -p "按任意键继续..." -n 1 -s ;;
            9) configure_automatic_updates; read -p "按任意键继续..." -n 1 -s ;;
            10) show_system_status; read -p "按任意键继续..." -n 1 -s ;;
            11) security_audit; read -p "按任意键继续..." -n 1 -s ;;
            12) full_security_hardening ;;
            13) show_help; read -p "按任意键继续..." -n 1 -s ;;
            0) 
                echo -e "${green}感谢使用VPS安全加固工具！${white}"
                exit 0
                ;;
            *)
                warn_msg "无效选择，请重新选择"
                sleep 1
                ;;
        esac
    done
}

full_security_hardening() {
    clear
    echo -e "${cyan}=== 完整安全加固流程 ===${white}"
    echo "此操作将执行完整的VPS安全加固，包括："
    echo "• SSH安全配置"
    echo "• 防火墙配置"
    echo "• 入侵防护"
    echo "• 系统内核加固"
    echo "• 自动更新配置"
    echo
    
    read -p "确认执行完整安全加固？(y/N): " confirm
    if [[ "$confirm" =~ ^[Yy]$ ]]; then
        info_msg "开始完整安全加固流程..."
        
        # 1. SSH安全配置
        echo
        echo "=== 第1步: SSH安全配置 ==="
        configure_ssh_security
        
        # 2. 防火墙配置
        echo
        echo "=== 第2步: 防火墙配置 ==="
        configure_ufw_firewall
        
        # 3. 入侵防护
        echo
        echo "=== 第3步: 入侵防护配置 ==="
        configure_fail2ban
        
        # 4. 系统加固
        echo
        echo "=== 第4步: 系统参数加固 ==="
        harden_kernel_parameters
        configure_user_limits
        
        # 5. 服务优化
        echo
        echo "=== 第5步: 服务优化 ==="
        disable_unnecessary_services
        
        # 6. 自动更新
        echo
        echo "=== 第6步: 自动更新配置 ==="
        configure_automatic_updates
        
        echo
        success_msg "完整安全加固流程已完成！"
        echo
        echo "建议立即执行安全审计检查配置效果"
        read -p "是否现在执行安全审计？(Y/n): " audit_confirm
        if [[ ! "$audit_confirm" =~ ^[Nn]$ ]]; then
            echo
            security_audit
        fi
    fi
    
    read -p "按任意键继续..." -n 1 -s
}
#endregion

#region //主程序入口
handle_arguments() {
    case "${1:-}" in
        --help|-h)
            show_help
            exit 0
            ;;
        --version|-v)
            echo "VPS安全加固工具 v$version"
            exit 0
            ;;
        --ssh)
            configure_ssh_security
            exit 0
            ;;
        --firewall)
            configure_firewall
            exit 0
            ;;
        --harden)
            system_hardening
            exit 0
            ;;
        --audit)
            security_audit
            exit 0
            ;;
        --status)
            show_system_status
            exit 0
            ;;
        --full)
            full_security_hardening
            exit 0
            ;;
        "")
            # 无参数，进入交互模式
            ;;
        *)
            echo "未知参数: $1"
            echo "使用 --help 查看帮助"
            exit 1
            ;;
    esac
}

main() {
    # 检查权限
    check_root_permission
    
    # 创建必要目录
    create_directories
    
    # 处理命令行参数
    handle_arguments "$@"
    
    # 检测系统
    detect_system
    
    # 记录启动
    log_operation "VPS安全加固工具 v$version 启动"
    
    # 进入主菜单
    main_menu
}

# 脚本执行入口
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
#endregion